p1_a
CREATE SCHEMA LibraryManagement;

p1_b
CREATE TABLE librarymanagement.authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(255)
);

p1_c
CREATE TABLE LibraryManagement.genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(255)
);

p1_d
CREATE TABLE LibraryManagement.books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    publication_year YEAR,
    author_id INT,
    genre_id INT,
    FOREIGN KEY (author_id) REFERENCES LibraryManagement.authors(author_id),
    FOREIGN KEY (genre_id) REFERENCES LibraryManagement.genres(genre_id)
);

p1_e
CREATE TABLE LibraryManagement.users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255),
    email VARCHAR(255)
);

p1_f
CREATE TABLE LibraryManagement.borrowed_books (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    user_id INT,
    borrow_date DATE,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES LibraryManagement.books(book_id),
    FOREIGN KEY (user_id) REFERENCES LibraryManagement.users(user_id)
);

p2_1
INSERT INTO LibraryManagement.authors (author_name) VALUES 
('Джон Сміт'),
('Мері Джонсон');

p2_2
INSERT INTO LibraryManagement.genres (genre_name) VALUES 
('Фантастика'),
('Роман');

p2_3
INSERT INTO LibraryManagement.books (title, publication_year, author_id, genre_id) VALUES 
('Пригоди в космосі', '2020', 1, 1),
('Кохання під дощем', '2018', 2, 2);

p2_4
INSERT INTO LibraryManagement.users (username, email) VALUES 
('Василь', 'vasyl@example.com'),
('Олена', 'olena@example.com');

p2_5
INSERT INTO LibraryManagement.borrowed_books (book_id, user_id, borrow_date, return_date) VALUES 
(1, 1, '2024-03-25', '2024-04-10'),
(2, 2, '2024-03-20', '2024-04-05');

p3
SELECT *
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.id = categories.id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;

p4_1
SELECT COUNT(*)
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.id = categories.id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id;

p4_2
SELECT COUNT(*)
FROM order_details
LEFT JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
LEFT JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN products ON order_details.product_id = products.id
LEFT JOIN categories ON products.id = categories.id
INNER JOIN shippers ON orders.shipper_id = shippers.id
LEFT JOIN suppliers ON products.supplier_id = suppliers.id;

було 36 ствло 518 - бо коли використовуємо LEFT або RIGHT JOIN, у результаті включаються всі рядки з лівої або правої таблиці, навіть якщо немає відповідних рядків у зв'язаних таблицях.

p4_3
SELECT *
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN employees ON orders.employee_id = employees.employee_id
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN categories ON products.id = categories.id
INNER JOIN shippers ON orders.shipper_id = shippers.id
INNER JOIN suppliers ON products.supplier_id = suppliers.id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10;

p4_4
SELECT 
categories.name AS category_name,
COUNT(*) AS row_count,
AVG(order_details.quantity) AS avg_quantity
FROM  order_details
INNER JOIN  products ON order_details.product_id = products.id
INNER JOIN  categories ON products.id = categories.id
GROUP BY  categories.name;

p4_5
SELECT 
categories.name AS category_name,
COUNT(*) AS row_count,
AVG(order_details.quantity) AS avg_quantity
FROM 
order_details
INNER JOIN 
products ON order_details.product_id = products.id
INNER JOIN 
categories ON products.id = categories.id
GROUP BY 
categories.name
HAVING 
AVG(order_details.quantity) > 21;

p4_6
SELECT 
categories.name AS category_name,
COUNT(*) AS row_count,
AVG(order_details.quantity) AS avg_quantity
FROM order_details
INNER JOIN  products ON order_details.product_id = products.id
INNER JOIN categories ON products.id = categories.id
GROUP BY  categories.name
HAVING AVG(order_details.quantity) > 21
ORDER BY row_count DESC;

p4_7
SELECT 
categories.name AS category_name,
COUNT(*) AS row_count,
AVG(order_details.quantity) AS avg_quantity
FROM  order_details
INNER JOIN  products ON order_details.product_id = products.id
INNER JOIN  categories ON products.id = categories.id
GROUP BY categories.name
HAVING AVG(order_details.quantity) > 21
ORDER BY row_count DESC
LIMIT 1, 4;